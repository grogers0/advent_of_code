use std::collections::{BTreeMap, BTreeSet};
use std::io::{self, Read};

use regex::Regex;

fn parse(input: &str) -> BTreeMap<[String; 2], i64> {
    let re = Regex::new("^([A-Za-z]+) would (gain|lose) (\\d+) happiness units by sitting next to ([A-Za-z]+).$").unwrap();
    let mut ret = BTreeMap::new();
    for line in input.lines() {
        let cap = re.captures(line).unwrap();
        let a = cap[1].to_string();
    }
}

fn part1(input: &str) -> i64 {
    0 // FIXME
}

fn part2(input: &str) -> usize {
    0 // FIXME
}

fn main() {
    let mut input = String::new();
    io::stdin().read_to_string(&mut input).unwrap();

    println!("{}", part1(&input));
    println!("{}", part2(&input));
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_part1() {
        // FIXME
    }

    #[test]
    fn test_part2() {
        // FIXME
    }
}
